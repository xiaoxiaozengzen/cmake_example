cmake_minimum_required(VERSION 3.14)
project(main)

if(NOT DEFINED OPT)
    set(OPT "")
endif()

if(${OPT} STREQUAL "PUBLIC")
    message(STATUS "-------------------------main OPT: PUBLIC")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/main.cpp.public ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
elseif(${OPT} STREQUAL "PRIVATE")
    message(STATUS "-------------------------main OPT: PRIVATE")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/main.cpp.private ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
elseif(${OPT} STREQUAL "INTERFACE")
    message(STATUS "-------------------------main OPT: INTERFACE")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/main.cpp.interface ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
else()
    set(OPT "PUBLIC")
    message(STATUS "-------------------------main OPT: DEFAULT(PUBLIC)")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/main.cpp.public ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
endif()

add_subdirectory(hello_world)

add_executable(main main.cpp)
if(${OPT} STREQUAL "PUBLIC")
    target_link_libraries(main PUBLIC hello_world)
    target_include_directories(main PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/hello_world)
elseif(${OPT} STREQUAL "PRIVATE")
    target_link_libraries(main PRIVATE hello_world)
    target_include_directories(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hello_world)
elseif(${OPT} STREQUAL "INTERFACE")
    target_link_libraries(main INTERFACE hello_world)
    target_include_directories(main INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/hello_world)
else()
    target_link_libraries(main PUBLIC hello_world)
    target_include_directories(main PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/hello_world)
endif()

get_target_property(TARGET_INCLUDE_DIRS_PUBLIC main PUBLIC_INCLUDE_DIRECTORIES)
get_target_property(TARGET_INCLUDE_DIRS_PRIVATE main PRIVATE_INCLUDE_DIRECTORIES)
get_target_property(TARGET_INCLUDE_DIRS_INTERFACE main INTERFACE_INCLUDE_DIRECTORIES)
get_target_property(TARGET_INCLUDE_DIRS main INCLUDE_DIRECTORIES)
message(STATUS "main PUBLIC_INCLUDE_DIRECTORIES: ${TARGET_INCLUDE_DIRS_PUBLIC}")
message(STATUS "main PRIVATE_INCLUDE_DIRECTORIES: ${TARGET_INCLUDE_DIRS_PRIVATE}")
message(STATUS "main INTERFACE_INCLUDE_DIRECTORIES: ${TARGET_INCLUDE_DIRS_INTERFACE}")
message(STATUS "main INCLUDE_DIRECTORIES: ${TARGET_INCLUDE_DIRS}")